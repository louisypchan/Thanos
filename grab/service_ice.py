# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.0
#
# <auto-generated>
#
# Generated from file `service.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import org_ice

# Included module svc
_M_svc = Ice.openModule('svc')

# Start of module org
_M_org = Ice.openModule('org')
__name__ = 'org'

_M_org._t_OrgService = IcePy.defineValue('::org::OrgService', Ice.Value, -1, (), False, True, None, ())

if 'OrgServicePrx' not in _M_org.__dict__:
    _M_org.OrgServicePrx = Ice.createTempClass()
    class OrgServicePrx(Ice.ObjectPrx):

        def getOrgInfo(self, name, context=None):
            return _M_org.OrgService._op_getOrgInfo.invoke(self, ((name, ), context))

        def getOrgInfoAsync(self, name, context=None):
            return _M_org.OrgService._op_getOrgInfo.invokeAsync(self, ((name, ), context))

        def begin_getOrgInfo(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_org.OrgService._op_getOrgInfo.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_getOrgInfo(self, _r):
            return _M_org.OrgService._op_getOrgInfo.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_org.OrgServicePrx.ice_checkedCast(proxy, '::org::OrgService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_org.OrgServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::org::OrgService'
    _M_org._t_OrgServicePrx = IcePy.defineProxy('::org::OrgService', OrgServicePrx)

    _M_org.OrgServicePrx = OrgServicePrx
    del OrgServicePrx

    _M_org.OrgService = Ice.createTempClass()
    class OrgService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::org::OrgService')

        def ice_id(self, current=None):
            return '::org::OrgService'

        @staticmethod
        def ice_staticId():
            return '::org::OrgService'

        def getOrgInfo(self, name, current=None):
            raise NotImplementedError("servant method 'getOrgInfo' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_org._t_OrgServiceDisp)

        __repr__ = __str__

    _M_org._t_OrgServiceDisp = IcePy.defineClass('::org::OrgService', OrgService, (), None, ())
    OrgService._ice_type = _M_org._t_OrgServiceDisp

    OrgService._op_getOrgInfo = IcePy.Operation('getOrgInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_svc._t_Org, False, 0), ())

    _M_org.OrgService = OrgService
    del OrgService

# End of module org
