// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `org.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.thanos.model.svc;

public class Org implements java.lang.Cloneable,
                            java.io.Serializable
{
    public String name;

    public String juridical;

    public String uscc;

    public String tin;

    public String registerNumber;

    public String code;

    public String category;

    public String ra;

    public String region;

    public String nub;

    public String term;

    public String addr;

    public String doa;

    public String scope;

    public String status;

    public String founded;

    public String period;

    public String registeredCapital;

    public RelatedPerson[] relatedPersons;

    public Partner[] partners;

    public String[] changeList;

    public String[] investment;

    public String[] subCompanies;

    public String[] properties;

    public Org()
    {
        this.name = "";
        this.juridical = "";
        this.uscc = "";
        this.tin = "";
        this.registerNumber = "";
        this.code = "";
        this.category = "";
        this.ra = "";
        this.region = "";
        this.nub = "";
        this.term = "";
        this.addr = "";
        this.doa = "";
        this.scope = "";
        this.status = "";
        this.founded = "";
        this.period = "";
        this.registeredCapital = "";
    }

    public Org(String name, String juridical, String uscc, String tin, String registerNumber, String code, String category, String ra, String region, String nub, String term, String addr, String doa, String scope, String status, String founded, String period, String registeredCapital, RelatedPerson[] relatedPersons, Partner[] partners, String[] changeList, String[] investment, String[] subCompanies, String[] properties)
    {
        this.name = name;
        this.juridical = juridical;
        this.uscc = uscc;
        this.tin = tin;
        this.registerNumber = registerNumber;
        this.code = code;
        this.category = category;
        this.ra = ra;
        this.region = region;
        this.nub = nub;
        this.term = term;
        this.addr = addr;
        this.doa = doa;
        this.scope = scope;
        this.status = status;
        this.founded = founded;
        this.period = period;
        this.registeredCapital = registeredCapital;
        this.relatedPersons = relatedPersons;
        this.partners = partners;
        this.changeList = changeList;
        this.investment = investment;
        this.subCompanies = subCompanies;
        this.properties = properties;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Org r = null;
        if(rhs instanceof Org)
        {
            r = (Org)rhs;
        }

        if(r != null)
        {
            if(this.name != r.name)
            {
                if(this.name == null || r.name == null || !this.name.equals(r.name))
                {
                    return false;
                }
            }
            if(this.juridical != r.juridical)
            {
                if(this.juridical == null || r.juridical == null || !this.juridical.equals(r.juridical))
                {
                    return false;
                }
            }
            if(this.uscc != r.uscc)
            {
                if(this.uscc == null || r.uscc == null || !this.uscc.equals(r.uscc))
                {
                    return false;
                }
            }
            if(this.tin != r.tin)
            {
                if(this.tin == null || r.tin == null || !this.tin.equals(r.tin))
                {
                    return false;
                }
            }
            if(this.registerNumber != r.registerNumber)
            {
                if(this.registerNumber == null || r.registerNumber == null || !this.registerNumber.equals(r.registerNumber))
                {
                    return false;
                }
            }
            if(this.code != r.code)
            {
                if(this.code == null || r.code == null || !this.code.equals(r.code))
                {
                    return false;
                }
            }
            if(this.category != r.category)
            {
                if(this.category == null || r.category == null || !this.category.equals(r.category))
                {
                    return false;
                }
            }
            if(this.ra != r.ra)
            {
                if(this.ra == null || r.ra == null || !this.ra.equals(r.ra))
                {
                    return false;
                }
            }
            if(this.region != r.region)
            {
                if(this.region == null || r.region == null || !this.region.equals(r.region))
                {
                    return false;
                }
            }
            if(this.nub != r.nub)
            {
                if(this.nub == null || r.nub == null || !this.nub.equals(r.nub))
                {
                    return false;
                }
            }
            if(this.term != r.term)
            {
                if(this.term == null || r.term == null || !this.term.equals(r.term))
                {
                    return false;
                }
            }
            if(this.addr != r.addr)
            {
                if(this.addr == null || r.addr == null || !this.addr.equals(r.addr))
                {
                    return false;
                }
            }
            if(this.doa != r.doa)
            {
                if(this.doa == null || r.doa == null || !this.doa.equals(r.doa))
                {
                    return false;
                }
            }
            if(this.scope != r.scope)
            {
                if(this.scope == null || r.scope == null || !this.scope.equals(r.scope))
                {
                    return false;
                }
            }
            if(this.status != r.status)
            {
                if(this.status == null || r.status == null || !this.status.equals(r.status))
                {
                    return false;
                }
            }
            if(this.founded != r.founded)
            {
                if(this.founded == null || r.founded == null || !this.founded.equals(r.founded))
                {
                    return false;
                }
            }
            if(this.period != r.period)
            {
                if(this.period == null || r.period == null || !this.period.equals(r.period))
                {
                    return false;
                }
            }
            if(this.registeredCapital != r.registeredCapital)
            {
                if(this.registeredCapital == null || r.registeredCapital == null || !this.registeredCapital.equals(r.registeredCapital))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(this.relatedPersons, r.relatedPersons))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.partners, r.partners))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.changeList, r.changeList))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.investment, r.investment))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.subCompanies, r.subCompanies))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.properties, r.properties))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::svc::Org");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, name);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, juridical);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, uscc);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, tin);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, registerNumber);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, code);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, category);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ra);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, region);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, nub);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, term);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, addr);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, doa);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, scope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, status);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, founded);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, period);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, registeredCapital);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, relatedPersons);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, partners);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, changeList);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, investment);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, subCompanies);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, properties);
        return h_;
    }

    public Org clone()
    {
        Org c = null;
        try
        {
            c = (Org)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.name);
        ostr.writeString(this.juridical);
        ostr.writeString(this.uscc);
        ostr.writeString(this.tin);
        ostr.writeString(this.registerNumber);
        ostr.writeString(this.code);
        ostr.writeString(this.category);
        ostr.writeString(this.ra);
        ostr.writeString(this.region);
        ostr.writeString(this.nub);
        ostr.writeString(this.term);
        ostr.writeString(this.addr);
        ostr.writeString(this.doa);
        ostr.writeString(this.scope);
        ostr.writeString(this.status);
        ostr.writeString(this.founded);
        ostr.writeString(this.period);
        ostr.writeString(this.registeredCapital);
        RelatedPersonSeqHelper.write(ostr, this.relatedPersons);
        PartnerSeqHelper.write(ostr, this.partners);
        ostr.writeStringSeq(this.changeList);
        ostr.writeStringSeq(this.investment);
        ostr.writeStringSeq(this.subCompanies);
        ostr.writeStringSeq(this.properties);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.name = istr.readString();
        this.juridical = istr.readString();
        this.uscc = istr.readString();
        this.tin = istr.readString();
        this.registerNumber = istr.readString();
        this.code = istr.readString();
        this.category = istr.readString();
        this.ra = istr.readString();
        this.region = istr.readString();
        this.nub = istr.readString();
        this.term = istr.readString();
        this.addr = istr.readString();
        this.doa = istr.readString();
        this.scope = istr.readString();
        this.status = istr.readString();
        this.founded = istr.readString();
        this.period = istr.readString();
        this.registeredCapital = istr.readString();
        this.relatedPersons = RelatedPersonSeqHelper.read(istr);
        this.partners = PartnerSeqHelper.read(istr);
        this.changeList = istr.readStringSeq();
        this.investment = istr.readStringSeq();
        this.subCompanies = istr.readStringSeq();
        this.properties = istr.readStringSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Org v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Org ice_read(com.zeroc.Ice.InputStream istr)
    {
        Org v = new Org();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Org> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Org v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Org> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Org.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Org _nullMarshalValue = new Org();

    public static final long serialVersionUID = -647578429L;
}
