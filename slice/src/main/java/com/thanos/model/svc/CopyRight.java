// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `org.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.thanos.model.svc;

public class CopyRight implements java.lang.Cloneable,
                                  java.io.Serializable
{
    public String approvalDate;

    public String name;

    public String cn;

    public String registeredNo;

    public String category;

    public String version;

    public CopyRight()
    {
        this.approvalDate = "";
        this.name = "";
        this.cn = "";
        this.registeredNo = "";
        this.category = "";
        this.version = "";
    }

    public CopyRight(String approvalDate, String name, String cn, String registeredNo, String category, String version)
    {
        this.approvalDate = approvalDate;
        this.name = name;
        this.cn = cn;
        this.registeredNo = registeredNo;
        this.category = category;
        this.version = version;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CopyRight r = null;
        if(rhs instanceof CopyRight)
        {
            r = (CopyRight)rhs;
        }

        if(r != null)
        {
            if(this.approvalDate != r.approvalDate)
            {
                if(this.approvalDate == null || r.approvalDate == null || !this.approvalDate.equals(r.approvalDate))
                {
                    return false;
                }
            }
            if(this.name != r.name)
            {
                if(this.name == null || r.name == null || !this.name.equals(r.name))
                {
                    return false;
                }
            }
            if(this.cn != r.cn)
            {
                if(this.cn == null || r.cn == null || !this.cn.equals(r.cn))
                {
                    return false;
                }
            }
            if(this.registeredNo != r.registeredNo)
            {
                if(this.registeredNo == null || r.registeredNo == null || !this.registeredNo.equals(r.registeredNo))
                {
                    return false;
                }
            }
            if(this.category != r.category)
            {
                if(this.category == null || r.category == null || !this.category.equals(r.category))
                {
                    return false;
                }
            }
            if(this.version != r.version)
            {
                if(this.version == null || r.version == null || !this.version.equals(r.version))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::svc::CopyRight");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, approvalDate);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, name);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, cn);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, registeredNo);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, category);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, version);
        return h_;
    }

    public CopyRight clone()
    {
        CopyRight c = null;
        try
        {
            c = (CopyRight)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.approvalDate);
        ostr.writeString(this.name);
        ostr.writeString(this.cn);
        ostr.writeString(this.registeredNo);
        ostr.writeString(this.category);
        ostr.writeString(this.version);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.approvalDate = istr.readString();
        this.name = istr.readString();
        this.cn = istr.readString();
        this.registeredNo = istr.readString();
        this.category = istr.readString();
        this.version = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CopyRight v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CopyRight ice_read(com.zeroc.Ice.InputStream istr)
    {
        CopyRight v = new CopyRight();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CopyRight> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CopyRight v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CopyRight> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CopyRight.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CopyRight _nullMarshalValue = new CopyRight();

    public static final long serialVersionUID = -51533710L;
}
